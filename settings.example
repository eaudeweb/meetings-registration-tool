# encoding: utf-8

import os

SQLALCHEMY_DATABASE_URI = 'postgresql://demo:demo@db/meetings'
SECRET_KEY = 'secret'


# Total upload size limit - if total size of all files used in registration
# exceeds this value the server returns a 413 Request Entity Too Large response
MAX_UPLOAD_SIZE = 10 * 1024 * 1024
# Single file size limit - used only in Javascript validation
MAX_FILE_SIZE = 1 * 1024 * 1024

# Name and title of the product
PRODUCT_TITLE = 'Meetings'

# Administator's email
ADMINISTRATOR_EMAIL = ''

# Supress sendding mails on localhost
MAIL_SUPPRESS_SEND = True

# Mail settings
MAIL_SERVER = 'localhost'
MAIL_PORT = 25
MAIL_USE_TLS = False
MAIL_USE_SSL = False
MAIL_USERNAME = None
MAIL_PASSWORD = None

# Mail used for sending reset tokens
MAIL_DEFAULT_SENDER = 'no-reply@eaudeweb.ro'

# Disable assets compilation
ASSETS_DEBUG = True
DEBUG = True

# Enable GOOGLE ANALYTICS
GOOGLE_ANALYTICS_KEY = ''

# Logos filenames; files should be located at project_dir/instance/files/logos/
PRODUCT_LOGO = 'badge_left_logo.png'
PRODUCT_SIDE_LOGO = 'badge_right_logo.png'
BADGE_BACK_LOGO = 'badge_back_logo.png'

# Domain name for correctly displaying registration URLs
DOMAIN_NAME = ''

# Choose a subset of the available languages: ['english', 'french', 'spanish']
# TRANSLATIONS = []

# Choose a subset of the available title choices if you don't need all of them:
# ['Mr', 'Ms', 'Dr', 'Prof']
# TITLE_CHOICES = []

# URL used by importer for participants photos
# PHOTOS_BASE_URL = ''

REDIS_URL = "redis://redis:6379/1"

# Custom names for countries not yet updated by Unicode Common Locale Repository

CUSTOMIZED_COUNTRIES = {
    'KP': {
        'en': u'Democratic People\u2019s Republic of Korea',
        'es': u'Rep\u00FAblica Popular Democr\u00E1tica de Corea',
        'fr': u' R\u00E9publique populaire d\u00E9mocratique de Cor\u00E9e'
    }
}

SENTRY_DSN = ''
APP_VERSION = os.environ.get('APP_VERSION')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,

    'formatters': {
        'console': {
            'format': '[%(asctime)s][%(levelname)s] %(name)s '
                      '%(filename)s:%(funcName)s:%(lineno)d | %(message)s',
            'datefmt': '%H:%M:%S',
        },
    },

    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'sentry': {
            'name': 'mrt:app',
            'level': 'ERROR',
            'class': 'raven.handlers.logging.SentryHandler',
            'dsn': SENTRY_DSN,
            'site': DOMAIN_NAME,
            'release': APP_VERSION,
            'environment': 'development',
            'ignore_exceptions': ['Http404']
        },
    },

    'loggers': {
        'mrt': {
            'handlers': ['console', 'sentry'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'debug': {
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}
